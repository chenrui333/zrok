services:
  zrok-caddyfile:
    image: busybox
    # create Caddyfile
    entrypoint:
      - sh
      - -euc
      - |
        cat <<CADDYFILE >| /mnt/.zrok/Caddyfile
        http:// {
          bind {{ .ZrokBindAddress }}
          handle_path /zrok-test/* {
              reverse_proxy http://zrok-test:9090 {
                  header_up Host zrok-test
              }
          }
          handle_path /zrok-files/* {
            root * /var/www/html
            file_server browse
          }
          reverse_proxy /* httpbin:8080 {
            header_up Host httpbin 
          }
        }
        CADDYFILE
        exec $${@}
    # matches uid:gid of "nobody" in zrok container image
    command: "-- echo INFO: created Caddyfile"
    user: root
    volumes:
      - zrok_env:/mnt/.zrok

  zrok-init:
    image: busybox
    depends_on:
      zrok-caddyfile:
        condition: service_completed_successfully
    # matches uid:gid of "nobody" in zrok container image
    command: chown -Rc 65534:65534 /mnt/.zrok
    user: root
    volumes:
      - zrok_env:/mnt/.zrok

  zrok-enable:
    image: ${ZROK_CONTAINER_IMAGE:-docker.io/openziti/zrok}
    depends_on:
      zrok-init:
        condition: service_completed_successfully
    entrypoint:
      - bash
      - -euc
      - |
        if [[ -n "$(jq '.ziti_identity' ~/.zrok/environment.json 2>/dev/null)" ]]; then
          echo "INFO: zrok environment is already enabled"
          exit 0
        else
          zrok config set apiEndpoint ${ZROK_API_ENDPOINT:-https://api.zrok.io}
          echo "INFO: running: zrok $$(sed -E "s/${ZROK_ENABLE_TOKEN}/************/" <<< $${@})"
          exec zrok $${@}
        fi
    command: -- enable --headless ${ZROK_ENABLE_TOKEN}
    volumes:
      - zrok_env:/mnt/.zrok
    environment:
      HOME: /mnt

  zrok-share:
    image: ${ZROK_CONTAINER_IMAGE:-docker.io/openziti/zrok}
    command: share public --headless --oauth-provider ${ZROK_OAUTH_PROVIDER:-github} --backend-mode caddy /mnt/.zrok/Caddyfile
    depends_on:
      zrok-enable:
        condition: service_completed_successfully
    volumes:
      - zrok_env:/mnt/.zrok
      - ./html:/var/www/html
    environment:
      HOME: /mnt
      PFXLOG_NO_JSON: "true"

  # demo servers you can share with zrok
  zrok-test:
    image: ${ZROK_CONTAINER_IMAGE:-docker.io/openziti/zrok}
    command: test endpoint --address 0.0.0.0  # 9090

  httpbin:
    image: mccutchen/go-httpbin  # 8080/tcp

volumes:
  zrok_env:
