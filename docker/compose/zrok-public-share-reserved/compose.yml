services:
  zrok-init:
    image: busybox
    # matches uid:gid of "nobody" in zrok container image
    command: chown -Rc 65534:65534 /mnt/.zrok
    user: root
    volumes:
      - zrok_env:/mnt/.zrok

  zrok-enable:
    image: ${ZROK_CONTAINER_IMAGE:-docker.io/openziti/zrok}
    depends_on:
      zrok-init:
        condition: service_completed_successfully
    entrypoint:
      - bash
      - -euc
      - |
        if [[ -n "$(jq '.ziti_identity' ~/.zrok/environment.json 2>/dev/null)" ]]; then
          echo "INFO: zrok environment is already enabled"
          exit 0
        else
          [[ -z "${ZROK_ENABLE_TOKEN}" ]] && echo "ERROR: ZROK_ENABLE_TOKEN is not defined" >&2 && exit 1
          zrok config set apiEndpoint ${ZROK_API_ENDPOINT:-https://api.zrok.io}
          echo "INFO: running: zrok $(sed -E "s/${ZROK_ENABLE_TOKEN}/************/" <<< $${@})"
          exec zrok $${@}
        fi
    command: -- enable --headless ${ZROK_ENABLE_TOKEN}
    volumes:
      - zrok_env:/mnt/.zrok
    environment:
      HOME: /mnt

  zrok-reserve:
    image: ${ZROK_CONTAINER_IMAGE:-docker.io/openziti/zrok}
    entrypoint:
      - bash
      - -euc
      - |
        if [[ -n "$(jq '.token' ~/.zrok/reserved.json 2>/dev/null)" ]]; then
          echo "INFO: noop: zrok backend is already reserved: $(jq -c . ~/.zrok/reserved.json)"
          exit 0
        else
          echo "INFO: running: zrok $${@}"
          zrok $${@}

          # store the first reservation because we want to allow overriding the upstream by changing the compose 
          # project's .env
          ZID=$(jq --raw-output '.ziti_identit' ~/.zrok/environment.json)
          [[ -z "$${ZID}" ]] && echo "ERROR: zrok environment is not enabled" >&2 && exit 1
          zrok overview \
          | jq --arg ZID "$${ZID}" '
            [
              .environments[]
              |select(.environment.zId == $$ZID)
              |.shares[]
              |select(.shareMode == "public")
            ]|first
          ' >| ~/.zrok/reserved.json
        fi
    command: -- reserve public --backend-mode proxy ${ZROK_PROXY_UPSTREAM:-http://zrok-test:9090/}
    depends_on:
      zrok-enable:
        condition: service_completed_successfully
    volumes:
      - zrok_env:/mnt/.zrok
    environment:
      HOME: /mnt

  zrok-share:
    image: ${ZROK_CONTAINER_IMAGE:-docker.io/openziti/zrok}
    entrypoint:
      - bash
      - -euc
      - |
        PUBLIC_URL=$(jq -r '.frontendEndpoint' ~/.zrok/reserved.json)
        [[ -z "$${PUBLIC_URL}" ]] && echo "ERROR: frontend endpoint not defined" >&2 && exit 1
        echo "INFO: zrok public URL: $${PUBLIC_URL}"
        RESERVATION=$(jq -r '.token' ~/.zrok/reserved.json)
        [[ -z "$${RESERVATION}" ]] && echo "ERROR: zrok reservation token not defined" >&2 && exit 1
        echo "INFO: zrok reservation token: $${RESERVATION}"
        echo "INFO: running: zrok $${@} $${RESERVATION}"
        exec zrok $${@} $${RESERVATION}
    command: -- share reserved --headless --override-endpoint ${ZROK_PROXY_UPSTREAM:-http://zrok-test:9090/}
    depends_on:
      zrok-reserve:
        condition: service_completed_successfully
    volumes:
      - zrok_env:/mnt/.zrok
    environment:
      HOME: /mnt
      PFXLOG_NO_JSON: "true"

  # demo servers you can share with zrok
  zrok-test:
    image: ${ZROK_CONTAINER_IMAGE:-docker.io/openziti/zrok}
    command: test endpoint --address 0.0.0.0  # 9090

volumes:
  zrok_env:
